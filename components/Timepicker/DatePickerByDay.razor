@* mọi thắc mắc xin liên hệ @Peter Tran *@
@* <button class=" bg-blue-700 dark:bg-blue-600 dark:focus:ring-blue-800 dark:hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium hover:bg-blue-800 inline-flex items-center px-4 py-2.5 rounded-lg text-center text-sm text-white" id="dropdownDefault" @onclick="Toggle" type="button"> *@
@* 	<div class="p-2">from: @Value.Item1</div> *@
@* 	@if (Value.Item2 != DateTime.MinValue) *@
@* 	{ *@
@* 		<div class="p-2">to: @Value.Item2</div> *@
@* 	} *@
@* 	else *@
@* 	{ *@
@* 		<div class="p-2">to:</div> *@
@* 	} *@
@* *@
@* </button> *@

<div class=" bg-white dark:bg-gray-700 gap-6 grid rounded shadow  z-10">
	<div class="w-full px-5">
		<div class="flex justify-between gap-4 border-b border-gray-200">
			<DatePicker @bind-Value="Value" MonthChange="MonthChange1" @ref="DatePicker1" Selected="OnSeSelected" Type="DatePicker.PickType.START"/>
			<DatePicker @bind-Value="Value" MonthChange="MonthChange2" @ref="DatePicker2" Selected="OnSeSelected" Type="DatePicker.PickType.END"/>
		</div>
		<div class="flex justify-between py-3">
			<div class="flex-col">
				<div class="">Nhận-Trả phòng</div>
				<div class="text-base font-semibold">@SelectTime</div>
			</div>
			<div class="grid content-center">
				<button class="bg-orange-600 px-4 py-2 rounded-md text-lg text-white" @onclick="Toggle" type="button">Tiếp Theo</button>
			</div>
		</div>
	</div>
</div>


@code {
	public DatePicker DatePicker1 { get; set; }
	public DatePicker DatePicker2 { get; set; }
	public string SelectTime { get; set; } = string.Empty;

	private (DateTime,DateTime) _value;

	[Parameter]
	public (DateTime,DateTime) Value
	{
		get => _value;
		set
		{
			if (_value == value ) return;
			_value = value;
			ValueChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<(DateTime,DateTime)> ValueChanged { get; set; }

	bool _isShow;

	private void ToggleDatePicker()
	{
		_isShow = !_isShow;
		StateHasChanged();
	}

	private void Toggle()
	{
		_isShow = !_isShow;

		StateHasChanged();
	}

	private void OnSeSelected(DateTime date)
	{
		if (Value.Item2 == DateTime.MinValue)
		{
			Value = (Value.Item1,date);
			if (Value.Item1 > Value.Item2)
			{
				Value = (Value.Item2,Value.Item1);
			}
		}
		else
		{
			Value = (date,DateTime.MinValue);
		}

		UpdateState();
	}

	protected override void OnInitialized()
	{
		Value = (DateTime.Now,DateTime.Now.AddDays(1));
		UpdateState();
	}


	void UpdateState()
	{
		if (Value.Item2 > Value.Item1)
		{
			SelectTime = Value.Item1.ToString("dd/MM") + " - " + Value.Item2.ToString("dd/MM");
			StateHasChanged();
		}
	}


	private void MonthChange1(int obj)
	{
		DatePicker2.UpdateMonthFormOutSide(obj);
	}

	private void MonthChange2(int obj)
	{
		DatePicker1.UpdateMonthFormOutSide(obj);
	}

}